---
# What robot is being controlled
MainRobot: Pepper
# Enabled controllers
Enabled: [Posture]

# Load and run state observers.
# Order matters here, estimators will be run after each other.

# Available estimators in mc_rtc are:
# - Encoder: Estimate encoder position from sensor and velocity by finite differences
# - BodySensor: Uses a BodySensor to compute the state of the floating base. This estimator will
# typically be used to obtained groundtruth information (e.g the FloatingBase body sensor contains the groundtruth floating base state when running in choreonoid)
# - KinematicInertial: Estimates the position and orientation of the floating base from the IMU orientation and assumed contacts. Note that this estimator requires to manually set the leftFootRatio  parameter to specify its anchor point, the default value is configured in-between the feet and is suitable for double-support only.
#
# To run the observers, please add in your controller-specific configuration file. For example
# RunObservers: [Encoder, BodySensor, KinematicInertial]
# UpdateObservers: [Encoder, KinematicInertial]
#
# Only the estimators in the "UpdateObservers" list will affect the state of the real robot.
# The other estimators will only be run and logged, such that they may be used for comparison purposes.
EnabledObservers: [Encoder]
RunObservers: [Encoder]
UpdateObservers: [Encoder]

# Specific configuration for each observer
Observers:
  Encoder:
    # Valid values are [estimator, control, none]
    UpdatePosition: control
    UpdateVelocity: control
    Log: true

# Controller timestep (s)
Timestep: 0.012
# Set to true or false to enable/disable respectively
Log: true

# LogDirectory dictates where the log files will be stored, defaults to
# system temp directory
LogDirectory: /tmp

# The log file will have the name [LogTemplate]-[ControllerName]-[date].log
LogTemplate: mc-control

# Logging-related disk operations happen in a separate thread
LogPolicy: threaded

# ROS publishing time step
PublishTimeStep: 0.02

# GUIServer section
GUIServer:
  # If true, enable the GUI server, otherwise or if absent, disable this
  # feature
  Enable: true
  # Publication timestep, actual rate is rounded up depending on the
  # controller timestep
  Timestep: 0.05
  # IPC (inter-process communication) section, if the section is absent
  # this disables the protocol, if the section is empty it is configured
  # to its default settings.
  IPC: {}
    # If the GUI server IPC protocol is enabled, this is used as a base
    # to create the sockets, the actual sockets name will be formed by
    # adding _sub.ipc and _rep.ipc to the provided path. The file will
    # be created if required. This defaults to $SYSTEM_TMP/mc_rtc
    # Socket: /tmp/mc_rtc
  # TCP section, the same remarks apply as IPC
  TCP:
    # Binding host, * binds to all interfaces
    Host: "*"
    # Binding ports, the first is used for PUB socket and the second for
    # the PULL socket
    Ports: [4242, 4343]
  # # WS (websocket) section, the same remarks apply as IPC
  # WS:
  #   # Binding host, * binds to all interfaces
  #   Host: "*"
  #   # Binding ports, the first is used for PUB socket and the second for
  #   # the PULL socket
  #   Ports: [8080, 8081]

# The following option change the verbosity of the controller and robot loader
VerboseLoader: false

# Interface specific parameters
PublishContactForces: true
UseRobotIMU: false
Blinking: true
Talking: true
# Uncomment line below to enable mobile base movements
#MoveMobileBase: true
